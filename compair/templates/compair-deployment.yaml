apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}-app
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.app.replicaCount }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        stage: {{ .Values.stage }}
        tier: app
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
          {
            "name": "init-db",
            "image": "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}",
            "command": ["sh", "-c", "python manage.py database create"],
            "imagePullPolicy": "{{ .Values.app.image.pullPolicy }}",
            "env": [
              {
                "name": "DB_HOST",
                "value": "{{ template "fullname" . }}-db"
              },
              {
                "name": "DB_PORT",
                "value": "{{ .Values.dbPort }}"
              },
              {
                "name": "DB_USERNAME",
                "value": "{{ .Values.dbUsername }}"
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom":
                {
                  "secretKeyRef":
                    {
                        "name": "{{ template "fullname" . }}",
                        "key": "mysql_password"
                    }
                }
              },
              {
                "name": "DB_NAME",
                "value": "{{ .Values.dbName }}"
              }
            ]
          },
          {
            "name": "upgrade-db",
            "image": "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}",
            "command": ["sh", "-c", "alembic upgrade head"],
            "imagePullPolicy": "{{ .Values.app.image.pullPolicy }}",
            "env": [
              {
                "name": "DB_HOST",
                "value": "{{ template "fullname" . }}-db"
              },
              {
                "name": "DB_PORT",
                "value": "{{ .Values.dbPort }}"
              },
              {
                "name": "DB_USERNAME",
                "value": "{{ .Values.dbUsername }}"
              },
              {
                "name": "DB_PASSWORD",
                "valueFrom":
                {
                  "secretKeyRef":
                    {
                        "name": "{{ template "fullname" . }}",
                        "key": "mysql_password"
                    }
                }
              },
              {
                "name": "DB_NAME",
                "value": "{{ .Values.dbName }}"
              }
            ]
          }
        ]'
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.app.image.repository }}:{{ .Values.app.image.tag }}"
        imagePullPolicy: {{ .Values.app.image.pullPolicy }}
        env:
        - name: DB_HOST
          value: {{ template "fullname" . }}-db
        - name: DB_PORT
          value: {{ .Values.dbPort | quote }}
        - name: DB_USERNAME
          value: {{ .Values.dbUsername }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: mysql_password
        - name: DB_NAME
          value: {{ .Values.dbName }}
        - name: CELERY_BROKER_URL
          value: "redis://{{ template "fullname" . }}-redis:{{ .Values.redis.service.port }}"
        - name: CAS_SERVER
          value: {{ .Values.casServer }}
        - name: CAS_AUTH_PREFIX
          value: {{ .Values.casAuthPrefix }}
        - name: XAPI_ENABLED
          value: {{ .Values.xapiEnabled | quote }}
        - name: XAPI_APP_BASE_URL
          value: {{ .Values.xapiAppBaseURL }}
        - name: LRS_STATEMENT_ENDPOINT
          value: {{ .Values.lrsStatementEndpoint }}
        - name: LRS_USERNAME
          value: {{ .Values.lrsUsername }}
        - name: LRS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: lrs_password
        - name: LRS_ACTOR_ACCOUNT_USE_CAS
          value: {{ .Values.lrsActorAccountUseCas | quote }}
        - name: LRS_ACTOR_ACCOUNT_CAS_IDENTIFIER
          value: {{ .Values.lrsActorAccountCasIdentifier }}
        - name: LRS_ACTOR_ACCOUNT_CAS_HOMEPAGE
          value: {{ .Values.lrsActorAccountCasHomepage }}
        - name: ASSET_LOCATION
          value: {{ .Values.assetLocation }}
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: secret_key
        - name: ENFORCE_SSL
          value: {{ .Values.enforceSSL | quote }}
        ports:
        - containerPort: {{ .Values.app.service.internalPort }}
        livenessProbe:
          httpGet:
            path: /
            port: {{ .Values.app.service.internalPort }}
        readinessProbe:
          httpGet:
            path: /
            port: {{ .Values.app.service.internalPort }}
      {{- if .Values.app.persistence.enabled }}
        volumeMounts:
        - name: {{ template "fullname" . }}-persistent-storage
          mountPath: /code/persistent
      volumes:
      - name: {{ template "fullname" . }}-persistent-storage
        persistentVolumeClaim:
          claimName: {{ template "fullname" . }}-app-pvc
      {{- end }}

---

apiVersion: v1
kind: Service
metadata:
  name: {{ template "fullname" . }}-app
  labels:
    app: {{ template "fullname" . }}
    stage: {{ .Values.stage }}
    tier: app
spec:
  type: {{ .Values.app.service.type }}
  ports:
    - port: {{ .Values.app.service.externalPort }}
      targetPort: {{ .Values.app.service.internalPort }}
  selector:
    app: {{ template "fullname" . }}
    stage: {{ .Values.stage }}
    tier: app

{{- if .Values.app.ingress.enabled }}
---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "fullname" . }}
  annotations:
    kubernetes.io/tls-acme: "true"
    kubernetes.io/ingress.class: {{ .Values.app.ingress.class }}
  labels:
    app: {{ template "fullname" . }}
    stage: {{ .Values.stage }}
    tier: app
spec:
  tls:
  - hosts:
    {{- if .Values.app.ingress.host }}
    - {{ .Values.app.ingress.host }}
    {{- end }}
    {{- if .Values.CI_ENVIRONMENT_HOSTNAME }}
    - {{ .Values.CI_ENVIRONMENT_HOSTNAME }}
    {{- end }}
    secretName: {{ .Values.app.ingress.host | default .Values.CI_ENVIRONMENT_HOSTNAME | replace "." "-" }}-tls
  rules:
  {{- if .Values.app.ingress.host }}
  - host: {{ .Values.app.ingress.host }}
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ template "fullname" . }}-app
          servicePort: {{ .Values.app.service.externalPort }}
  {{- end }}
  {{- if .Values.CI_ENVIRONMENT_HOSTNAME }}
  - host: {{ .Values.CI_ENVIRONMENT_HOSTNAME }}
    http:
      paths:
      - path: /
        backend:
          serviceName: {{ template "fullname" . }}-app
          servicePort: {{ .Values.app.service.externalPort }}
  {{- end }}
{{ end }}
